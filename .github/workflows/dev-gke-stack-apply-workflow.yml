name: 'Apply GCP Terraform Configuration'

on:
  workflow_dispatch:  # Manual trigger to apply infrastructure

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout Current Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: Set up Google Cloud Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}

      # ------------------------
      # 00 Foundation Module
      # ------------------------

      - name: Create terraform.tfvars for Foundation
        working-directory: gke-stack/envs/dev/00-foundation
        run: |
          cat > terraform.tfvars <<EOF
          project_id = "${{ secrets.GCP_PROJECT_ID }}"
          region     = "us-central1"
          EOF

      - name: Initialize Terraform (Foundation)
        working-directory: gke-stack/envs/dev/00-foundation
        run: terraform init

      - name: Run Terraform Validate (Foundation)
        working-directory: gke-stack/envs/dev/00-foundation
        run: terraform validate
        continue-on-error: false

      - name: Terraform Plan (Foundation)
        working-directory: gke-stack/envs/dev/00-foundation
        run: terraform plan -out=tfplan-foundation

      - name: Terraform Apply (Foundation)
        working-directory: gke-stack/envs/dev/00-foundation
        run: terraform apply tfplan-foundation
        continue-on-error: true
        if: success()

      # ------------------------
      # 01 Network Module
      # ------------------------

      - name: Create terraform.tfvars for Network
        working-directory: gke-stack/envs/dev/01-network
        run: |
          cat > terraform.tfvars <<EOF
          project_id = "${{ secrets.GCP_PROJECT_ID }}"
          region     = "us-central1"
          network_name = "dev-network"
          EOF

      - name: Initialize Terraform (Network)
        working-directory: gke-stack/envs/dev/01-network
        run: terraform init

      - name: Run Terraform Validate (Network)
        working-directory: gke-stack/envs/dev/01-network
        run: terraform validate
        continue-on-error: false

      - name: Terraform Plan (Network)
        working-directory: gke-stack/envs/dev/01-network
        run: terraform plan -out=tfplan-network

      - name: Terraform Apply (Network)
        working-directory: gke-stack/envs/dev/01-network
        run: terraform apply tfplan-network
        continue-on-error: true
        if: success()

      # ------------------------
      # 02 Cluster Module
      # ------------------------

      - name: Create terraform.tfvars for Cluster
        working-directory: gke-stack/envs/dev/02-cluster
        run: |
          cat > terraform.tfvars <<EOF
          project_id = "${{ secrets.GCP_PROJECT_ID }}"
          region     = "us-central1"
          cluster_name = "dev-cluster"
          node_count = 3
          network_name = "dev-network"
          subnetwork_name = "dev-network-subnet-private"
          EOF

      - name: Initialize Terraform (Cluster)
        working-directory: gke-stack/envs/dev/02-cluster
        run: terraform init

      - name: Run Terraform Validate (Cluster)
        working-directory: gke-stack/envs/dev/02-cluster
        run: terraform validate
        continue-on-error: false

      - name: Terraform Plan (Cluster)
        working-directory: gke-stack/envs/dev/02-cluster
        run: terraform plan -out=tfplan-cluster

      - name: Terraform Apply (Cluster)
        working-directory: gke-stack/envs/dev/02-cluster
        run: terraform apply tfplan-cluster
        continue-on-error: true
        if: success()

      # Discord Notifications
      - name: Notify Discord on Success
        if: success()
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"content": "✅ **Terraform Apply Workflow Succeeded!**\n\nRepository: ${{ github.repository }}\nWorkflow: ${{ github.workflow }}\nRun ID: ${{ github.run_id }}\nView run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"content": "❌ **Terraform Apply Workflow Failed!**\n\nRepository: ${{ github.repository }}\nWorkflow: ${{ github.workflow }}\nRun ID: ${{ github.run_id }}\nView run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
            ${{ secrets.DISCORD_WEBHOOK_URL }} 